-- UTILIZAR UM COMENTARIO EM UMA LINHA (SINAL DE MENOS DOBRADO)
/*
SELECT
    *
FROM

PARA COMENTAR UM BLOCO, DIVERSAS LINHAS, UTILIZA /* E 
*/
-- ESTRUTURA DO COMANDO DML SELECT
SELECT -- AS COLUNAS A SEREM PROJETADAS, SEPARADAS POR V RGULA
       -- PARA PROJETAR TODAS AS COLUNAS DA ORIGEM (FROM) UILIZAR O *
FROM -- TRAZER A ORIGEM DE ONDE SER O EXTRA DOS OS DADOS
     -- PODER SER TABELAS, VIEWS, SUBQUERIES
WHERE -- PARA RESTRI  O DE LINHAS. MOSTRAR AS LINHAS QUE ATENDAM
      -- UMA CONDI  O (UTILIZAR OS OPERADORES RELACIONAIS: =, >=, <=, <> !=, >, <
      -- OPERADORES LÓGICOS: NOT, AND, OR
      -- OUTROS OPERADORES: BETWEEN, LIKE)
GROUP BY -- ORGANIZAR O RESULTADO COM SUB GRUPOS
HAVING -- PARA RESTRI  O DE SUBGRUPOS (PODE SER UTILIZADOS OS MESMOS OPERADORES
       -- DA CL USULA WHERE
ORDER BY -- UTILIZADA PARA ORDENAR O RESULTADO
; -- ; FINALIZA A QUERY

-- UITLIZAR O SELECT PARA PRODUZIR VALORES CONSTANTES. PEX: UM CALCULO
SELECT (34213423423 * 542342) / 3453453 AS CALC,
       TO_CHAR(SYSDATE,'DD-MM-YYYY') "DATA SISTEMA",
       ROUND((34213423423 * 542342) / 3453453,2) AS CALC1,
       'REPETIDO' STRING_CONSTANTE,
       56 ALGARISMOS
FROM DUAL;

-- UITLIZAR O SELECT PARA PRODUZIR VALORES CONSTANTES COM RESULTADOS DE TABELAS/VIEW
SELECT LAST_NAME,
       (34213423423 * 542342) / 3453453 AS CALC,
       TO_CHAR(SYSDATE,'DD-MM-YYYY') "DATA SISTEMA",
       ROUND((34213423423 * 542342) / 3453453,2) AS CALC1,
       'REPETIDO' STRING_CONSTANTE,
       56 ALGARISMOS
FROM EMP;

-- EXPLORANDO AS INFORMAÃ‡Ã•ES EXISTENTES NO DD (CATÃ?LOGO) DO ORACLE
SHOW USER; -- PARA MOSTRAR O USUÃ?RIO LOGADO

-- CRIANDO TABELAS 
CREATE TABLE TAB_TUV
(
C1  NUMBER
);

-- RECRIANDO TABELA TAB_TUV 
DROP TABLE TAB_TUV;

CREATE TABLE TAB_TUV
(
C1  NUMBER     ,
C2  CHAR(2) NOT NULL,
C3  VARCHAR2(100)
);

CREATE TABLE TAB_TUV
(
C1  NUMBER CONSTRAINT PK_TAB_TUV PRIMARY KEY,
C2  CHAR(2) NOT NULL,
C3  VARCHAR2(100)
);
-- OUTRA ALTERNATIVA PARA COLOCAR A PK
CREATE TABLE TAB_TUV
(
C1  NUMBER,
C2  CHAR(2) NOT NULL,
C3  VARCHAR2(100),
CONSTRAINT PK_TAB_TUV PRIMARY KEY (C1,C2) -- PRINCIPALMENTE SE A PK FOR COMPOSTA (ÚNICA FORMA)
);

-- OUTRA ALTERNATIVA PARA COLOCAR A PK
CREATE TABLE TAB_TUV
(
C1  NUMBER,
C2  CHAR(2) NOT NULL,
C3  VARCHAR2(100),
CONSTRAINT PK_TAB_TUV PRIMARY KEY (C1)
);

-- CRIANDO A TAB_TUV2 
CREATE TABLE TAB_TUV2
(
COL1  NUMBER(4) CONSTRAINT PK_TAB_TUV2 PRIMARY KEY,
COL2  NUMBER
);

-- ALTERANDO TABELAS
ALTER TABLE TAB_TUV2
ADD CONSTRAINT FK_TAB_TUV2_TUV FOREIGN KEY (COL2) REFERENCES TAB_TUV (C1)
ADD CONSTRAINT CK_TAB_TUV2_COL1 CHECK (COL1 > 0);

ALTER TABLE TAB_TUV2
DROP CONSTRAINT CK_TAB_TUV2_COL1;  -- ELIMINADO A REGRA CRIADA ANTERIORMENT

-- VERIFICANDO A CRIAÇÃO DA TABELA
-- UTILIZANDO UM COMANDO DE DESCRÇÃO: DESC (SÓ EXISTE ORACLE)
-- MOSTRANDO A ESTRUTURA DA TABELA RESUMIDA
DESC TAB_TUV;

-- ACESSANDO O DICIONÁRIO DE DADOS DINÂMICO (DD)
DESC USER_TABLES;

SELECT *
FROM USER_TABLES
WHERE --TABLE_NAME='TAB_TUV'
      TABLE_NAME IN ('TAB_TUV','TAB_TUV2');

-- VERIFICANDO AS COLUNAS DA TABELA CRIADA

SELECT *
FROM USER_TAB_COLUMNS
WHERE --TABLE_NAME='TAB_TUV'
      TABLE_NAME IN ('TAB_TUV','TAB_TUV2');

-- VERFICANDO AS REGRAS (CONSTRAINTS) RELACIONADAS À TABELA CRIADA
SELECT *
FROM USER_CONSTRAINTS
WHERE --TABLE_NAME='TAB_TUV'
      TABLE_NAME IN ('TAB_TUV','TAB_TUV2');

-- VERFICANDO AS REGRAS (CONSTRAINTS) RELACIONADAS À TABELA CRIADA
SELECT *
FROM USER_CONS_COLUMNS
WHERE --TABLE_NAME='TAB_TUV'
      TABLE_NAME IN ('TAB_TUV','TAB_TUV2');

-- MOSTRANDO O ÍNDICE CORREPONDENTE A PK
SELECT *
FROM USER_INDEXES
WHERE --TABLE_NAME='TAB_TUV'
      TABLE_NAME IN ('TAB_TUV','TAB_TUV2');

-- MOSTRANDO O ÍNDICE CORREPONDENTE A PK
SELECT *
FROM USER_IND_COLUMNS
WHERE --TABLE_NAME='TAB_TUV'
      TABLE_NAME IN ('TAB_TUV','TAB_TUV2');

-- UTILIZANDO A VIEW QUE MOSTRA TODOS OS OBJETOS QUE SEU USUÁRIO PORDE VISUALIZAR
DESC ALL_OBJECTS;

SELECT * -- MOSTRANDO TODOS OBJETOS SEM RESTRIÇÃO
FROM ALL_OBJECTS;

SELECT COUNT(*) -- CONTAR OS OBJETOS QUE SEU USUÁRIO PODE VER
FROM ALL_OBJECTS;

SELECT COUNT(*) -- CONTAR SOMENTE TABELAS QUE SEU USUÁRIO PODE VER
FROM ALL_OBJECTS
WHERE OBJECT_TYPE='TABLE'; -- COMPARAÇÃO DE CONTEÚDO NO DD TEM QUE SER EM MAIÚSCULAS

-- APLICANDO UM FILTRO PARA BUSCAR ALGO DE INTERESSE NO DD
SELECT OBJECT_NAME
FROM ALL_OBJECTS
WHERE OBJECT_TYPE='VIEW'
  AND OBJECT_NAME LIKE '%TAB%ES'; -- % SUBSTITUI UMA CADEIA DE CARACTERES
  
SELECT OBJECT_NAME
FROM ALL_OBJECTS
WHERE OBJECT_TYPE='VIEW'
  AND OBJECT_NAME LIKE 'A____T%TAB%';  -- _ (UNDERLINE) SUBSTITUI UMA POSIÇÃO POR QUALQUER CARACTER
  
-- APLICANDO UM FILTRO PARA BUSCAR INFORMAÇÕES RELACIONADAS NO DD
SELECT OBJECT_NAME
FROM ALL_OBJECTS
WHERE OBJECT_TYPE='VIEW'
  AND OBJECT_NAME LIKE 'U%TABLE%';
  
-- APLICANDO UM FILTRO PARA BUSCAR INFORMAÇÕES RELACIONADAS NO DD
SELECT OBJECT_NAME
FROM ALL_OBJECTS
WHERE OBJECT_TYPE='VIEW'
  AND OBJECT_NAME LIKE 'U%TAB%COL%';
  
-- APLICANDO UM FILTRO PARA BUSCAR INFORMAÇÕES CONSTRAINTS NO DD
SELECT OBJECT_NAME
FROM ALL_OBJECTS
WHERE OBJECT_TYPE='VIEW'
  AND OBJECT_NAME LIKE 'U%CONS%';

-- CONSULTANDO DISTINTAMENTE OS TIPOS DE OBJETOS EXISTENTES NO BD ORACLE  
SELECT DISTINCT OBJECT_TYPE
FROM ALL_OBJECTS;

-- CRIANDO A PRIMEIRA TABELA DO PROJETO PEDIDO
DROP TABLE CLIENTE;
 
CREATE TABLE CLIENTE
(
CODIGO          NUMBER  ,
NOME            VARCHAR2(60) NOT NULL,
RUA             VARCHAR2(80) NOT NULL,
NR              NUMBER(4) NOT NULL,
BAIRRO          VARCHAR2(50) NOT NULL,
COMPLEMENTO     VARCHAR2(100) NULL,
CIDADE          VARCHAR2(50) NOT NULL,
UF              VARCHAR2(2) NOT NULL,
CEP             VARCHAR2(10) NOT NULL,
CONSTRAINT PK_CLIENTE PRIMARY KEY (CODIGO)
);

-- CRIANDO INDÍCES
DESC TAB_TUV;

DROP INDEX UK_TAB_TUV_C2;

CREATE UNIQUE INDEX IND_TAB_TUV_C2 ON TAB_TUV (C2 DESC);

CREATE INDEX IND_TAB_TUV_C3 ON TAB_TUV (C3);

-- VERFICANDO AS REGRAS (CONSTRAINTS) RELACIONADAS À TABELA CRIADA
SELECT *
FROM USER_CONSTRAINTS
WHERE --TABLE_NAME='TAB_TUV'
      TABLE_NAME IN ('TAB_TUV');
      
ALTER TABLE TAB_TUV
ADD CONSTRAINT UK_TAB_TUV_C2 UNIQUE (C2);

ALTER TABLE TAB_TUV
MODIFY C2 NOT NULL;

ALTER TABLE TAB_TUV
DROP CONSTRAINT SYS_C00282281;

-- VERFICANDO AS REGRAS (CONSTRAINTS) RELACIONADAS À TABELA CRIADA
SELECT *
FROM USER_CONS_COLUMNS
WHERE --TABLE_NAME='TAB_TUV'
      TABLE_NAME IN ('TAB_TUV');

-- MOSTRANDO O ÍNDICE CORREPONDENTE A PK
SELECT *
FROM USER_INDEXES
WHERE --TABLE_NAME='TAB_TUV'
      TABLE_NAME IN ('TAB_TUV');

-- MOSTRANDO O ÍNDICE CORREPONDENTE A PK
SELECT *
FROM USER_IND_COLUMNS
WHERE --TABLE_NAME='TAB_TUV'
      TABLE_NAME IN ('TAB_TUV');

-- CREAÇÃO DE SEQUENCES
-- MINVALUE, MAXVALUE, START WITH, CYCLE/NOCYCLE, ORDER/NOORDER, INCREMENT BY, CACHE 
DROP SEQUENCE SEQ_TAB_TUV;

CREATE SEQUENCE SEQ_TAB_TUV INCREMENT BY 2 MINVALUE 1 MAXVALUE 200;

--- VERIFICANDO A SEQUENCE NO DD
SELECT *
FROM USER_SEQUENCES
WHERE SEQUENCE_NAME='SEQ_TAB_TUV';

-- UTILIZANDO A SEQUENCE
-- NEXTVAL OU CURRVAL
SELECT SEQ_TAB_TUV.NEXTVAL
FROM DUAL;

SELECT SEQ_TAB_TUV.CURRVAL
FROM DUAL;

SELECT SEQ_TAB_TUV.NEXTVAL, EMP.*
FROM EMP;

-- CRIANDO A SEQUENCE CYCLE
DROP SEQUENCE SEQ_TAB_TUV;

CREATE SEQUENCE SEQ_TAB_TUV INCREMENT BY 3 MINVALUE 1 START WITH 9 MAXVALUE 20 CYCLE CACHE 5;


--------------------------------------------------------------------------------------------------------------------------------------------------------------

--INSERINDO DADOS NO BD
DESC TAB_TUV;
--INSERINDO UM REGISTRO POR VEZ
INSERT INTO TAB_TUV (c1, c2, c3) VALUES (1,'AB','TESTANDO INCLUSOES DE DADOS.......');
INSERT INTO TAB_TUV (c1, c2, c3) VALUES (2,'ab',''); -- comvalor nulo null
INSERT INTO TAB_TUV (c1, c2, c3) VALUES (3,'ac',null);
INSERT INTO TAB_TUV (c1, c2) VALUES (5,'DC','TESTANDO INCLUSOES DE DADOS.......');
INSERT INTO TAB_TUV VALUES (6,'EC',NULL);

SELECT * 
FROM TAB_TUV;

ROLLBACK;

COMMIT;

--USO DO SAVE POINT 
SAVEPOINT P2;

ROLLBACK TO P1;


--- faltando explicar a inserçao de multiplos 





